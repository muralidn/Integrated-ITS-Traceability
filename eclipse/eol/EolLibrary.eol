var DERIVE_LINK : Integer = 1;
var IMPLEMENT_LINK : Integer = 2;
var VERIFY_LINK : Integer = 3;
var DERIVE_LINK_LOCAL : Integer = 4;
var IMPLEMENT_LINK_LOCAL : Integer = 5;
var VERIFY_LINK_LOCAL : Integer = 6;


operation modelComparision(links : Sequence<Any>, upstreamArtifacts : OrderedSet<Any>, downstreamArtifacts : OrderedSet<Any>, msg : String) : String {
	
	links.println();
	for(lnk : LTM!Traceability in links) {
		var upstreamArtifact = upstreamArtifacts.selectOne(p : GTM!Artifact | p.artifactID = lnk.source.artifactID);	
		var downstreamArtifact = downstreamArtifacts.selectOne(p : GTM!Artifact | p.artifactID = lnk.destination.artifactID);	 	

		if (upstreamArtifact == null) 
			msg = msg + "- New " + lnk.source.eClass().name + " " + lnk.source.artifactID + " added in the LTM.\n";
		else if (downstreamArtifact == null) 
			msg = msg + "- New " + lnk.source.eClass().name + " " + lnk.destination.artifactID + " added in the LTM.\n";
		else {
				if (lnk.source.downstreamTraceLinks.size() != upstreamArtifact.downstreamTraceLinks.size()){
					msg = msg + "- Mismatch in trace links between " + lnk.source.artifactID + " and " + upstreamArtifact.artifactID + "\n";
				}

				if (lnk.destination.upstreamTraceLinks.size() != downstreamArtifact.upstreamTraceLinks.size()){
					msg = msg + "- Mismatch in trace links between " + lnk.destination.artifactID + " and " + downstreamArtifact.artifactID + "\n";
				}				
			}
		}

	return msg;
}


operation getFullModelID(modelID : String, modelFile : String) : String {

	var sourcePrefix = "";
	if ("crs_plant.slx".isSubstringOf(modelFile))
		sourcePrefix = "crs_plant.slx-";
	else if ("crs_controllerdic.sldd".isSubstringOf(modelFile)) 
		sourcePrefix = "crs_controllerdic.sldd-";
	else if ("crs_controller.slx".isSubstringOf(modelFile)) 
		sourcePrefix = "crs_controller.slx-";

	else
		sourcePrefix = modelFile;

	return  sourcePrefix + modelID;

}

operation getFullTestID(testID : String, testFile : String) : String {

	var sourcePrefix = "";
	if ("DriverSwRequest_Tests.mldatx".isSubstringOf(testFile))
		sourcePrefix = "DriverSwRequest_Tests.mldatx-";
	else
		sourcePrefix = testFile;

	return  sourcePrefix + testID;

}

operation getFullReqID(reqID : String, reqFile : String) : String {

		var reqFilePrefix = "";
		if ("crs_req.slreqx".isSubstringOf(reqFile))
			reqFilePrefix = "crs_req.slreqx-";
		else if ("crs_req_func_spec.slreqx".isSubstringOf(reqFile)) 
			reqFilePrefix = "crs_req_func_spec.slreqx-";
		else
			reqFilePrefix = reqFile;			

		return reqFilePrefix + reqID;
		
}

operation createArtifact(artifact : MODEL!Artifact,  artifactID : String, cr : MODEL!Change_Request_Ticket, modelBoundary : MODEL!GlobalTraceModel,  validity : Boolean) : MODEL!Artifact {
	artifact.artifactID = artifactID;
	if (validity)
		artifact.progress = MODEL!Progress_Enum#HUNDRED_PERCENT;
	else
		artifact.progress = MODEL!Progress_Enum#ZERO;
		
	//Hack due to a limitation
	if (cr.crID != -999) {
		artifact.changeRequests.add(cr);
		cr.affectedArtifacts.add(artifact);
	}
	return artifact;

}



operation createSystemRequirement(reqID : String, cr : MODEL!Change_Request_Ticket, modelBoundary : MODEL!GlobalTraceModel, validity : Boolean) : MODEL!SystemRequirement {

	var artifact = new MODEL!SystemRequirement;
	artifact = createArtifact(artifact, reqID, cr, modelBoundary, validity);
	modelBoundary.sysRequirements.add(artifact);
	return artifact;

} 

operation createFunctionalRequirement(reqID : String, cr : MODEL!Change_Request_Ticket, modelBoundary : MODEL!GlobalTraceModel, validity : Boolean) : MODEL!FunctionalRequirement {

	var artifact = new MODEL!FunctionalRequirement;
	artifact = createArtifact(artifact, reqID, cr, modelBoundary, validity);
	modelBoundary.funcRequirements.add(artifact);
	return artifact;

} 

operation createModels(artifactID : String, cr : MODEL!Change_Request_Ticket, modelBoundary : MODEL!GlobalTraceModel, validity : Boolean) : MODEL!Model {

	var artifact = new MODEL!Model;
	artifact = createArtifact(artifact, artifactID, cr, modelBoundary, validity);
	modelBoundary.modelBlocks.add(artifact);
	return artifact;

} 

operation createTests(artifactID : String, cr : MODEL!Change_Request_Ticket, modelBoundary : MODEL!GlobalTraceModel, validity : Boolean) : MODEL!Test {

	var artifact = new MODEL!Test;
	artifact = createArtifact(artifact, artifactID, cr, modelBoundary, validity);
	modelBoundary.testBlocks.add(artifact);
	return artifact;

} 


operation getSystemRequirement(sysReqArtifactID : String, modelBoundary : MODEL!GlobalTraceModel) : MODEL!SystemRequirement {
	
	return modelBoundary.sysRequirements.selectOne(p : MODEL!SystemRequirement | p.artifactID = sysReqArtifactID);

}

operation createDeriveTraceLink(source : MODEL!SystemRequirement,  dest : MODEL!FunctionalRequirement, validity : Boolean, modelBoundary : MODEL!GlobalTraceModel,  traceUID : Integer) : MODEL!Traceability {
	var traceLink = new MODEL!Derive;
	
	traceLink.traceUID = traceUID;
	traceLink.source = source;
	traceLink.destination = dest;
	traceLink.valid = validity;
		
	modelBoundary.deriveTraceLinks.add(traceLink);
	return traceLink;
	
}

operation createImplementTraceLink(source : MODEL!FunctionalRequirement,  dest : MODEL!Model, validity : Boolean, modelBoundary : MODEL!GlobalTraceModel,  traceUID : Integer) : MODEL!Traceability {
	var traceLink = new MODEL!Implement;
	
	traceLink.traceUID = traceUID;
	traceLink.source = source;
	traceLink.destination = dest;
	traceLink.valid = validity;

	modelBoundary.implementTraceLinks.add(traceLink);
	return traceLink;
	
}

operation createVerifyTraceLink(source : MODEL!FunctionalRequirement,  dest : MODEL!Test, validity : Boolean, modelBoundary : MODEL!GlobalTraceModel,  traceUID : Integer) : MODEL!Traceability {
	var traceLink = new MODEL!Verify;
	
	traceLink.traceUID = traceUID;
	traceLink.source = source;
	traceLink.destination = dest;
	traceLink.valid = validity;

	modelBoundary.verifyTraceLinks.add(traceLink);
	return traceLink;
	
}

operation createDeriveTraceability(sysReqArtifactID : String, funcReqArtifactID : String, cr : MODEL!Change_Request_Ticket, modelBoundary : MODEL!GlobalTraceModel, traceUID : Integer, mode : Integer, validity : Boolean) : MODEL!Traceability {

		var systemRequirement = getSystemRequirement(sysReqArtifactID, modelBoundary);
		var funcRequirement = modelBoundary.funcRequirements.selectOne(p : MODEL!FunctionalRequirement | p.artifactID = funcReqArtifactID);

		var sourceArtifact = null;
		var destArtifact = null;
		var traceLink = null;
		
		if (systemRequirement == null and funcRequirement == null) {
			if (mode == DERIVE_LINK) {
				sourceArtifact = createSystemRequirement(sysReqArtifactID, cr, modelBoundary, validity);
				destArtifact = createFunctionalRequirement(funcReqArtifactID, cr, modelBoundary, validity);		
			}	
			else
				return;
		}
		else if (systemRequirement != null and funcRequirement == null) {
		
			sourceArtifact = systemRequirement;
			destArtifact = createFunctionalRequirement(funcReqArtifactID, cr, modelBoundary, validity);
	
			
		}
		else if (systemRequirement == null and funcRequirement != null) {
			sourceArtifact = createSystemRequirement(sysReqArtifactID, cr, modelBoundary, validity);
			destArtifact = funcRequirement;
		} 				

		else {
			
			var found : Boolean = false;
			for (dsa : MODEL!Derive in systemRequirement.downstreamTraceLinks) {
			
				if (dsa.destination.artifactID == funcReqArtifactID) {
						found = true;
						break;
					}
			}
			if (found == false) {
				sourceArtifact = systemRequirement;
				destArtifact = funcRequirement;
			}
			else {
			
				return;
			}
			
		}
				
		traceLink = createDeriveTraceLink(sourceArtifact, destArtifact, validity, modelBoundary, traceUID);
		sourceArtifact.downstreamTraceLinks.add(traceLink);
		destArtifact.upstreamTraceLinks.add(traceLink);		
		
		return traceLink;
			
}

operation createImplementVerifyTraceability(artifactID : String, funcReqArtifactID : String, cr : MODEL!Change_Request_Ticket, modelBoundary : MODEL!GlobalTraceModel, traceUID : Integer, mode : Integer, validity : Boolean) : MODEL!Traceability {


		var funcRequirement = modelBoundary.funcRequirements.selectOne(p : MODEL!FunctionalRequirement | p.artifactID = funcReqArtifactID);
		var artifact = null;
		if ((mode == IMPLEMENT_LINK) or (mode == IMPLEMENT_LINK_LOCAL))
			artifact = modelBoundary.modelBlocks.selectOne(p : MODEL!Model | p.artifactID = artifactID);	
		else
			artifact = modelBoundary.testBlocks.selectOne(p : MODEL!Test | p.artifactID = artifactID);	

		var sourceArtifact = null;
		var destArtifact = null;
		
		var traceLink = null;
		
		if (funcRequirement == null and artifact == null) {
			if ((mode == IMPLEMENT_LINK) or (mode == VERIFY_LINK))
			{
				sourceArtifact = createFunctionalRequirement(funcReqArtifactID, cr, modelBoundary, validity);	
				if (mode == IMPLEMENT_LINK)
					destArtifact = createModels(artifactID, cr, modelBoundary, validity);		
				else
					destArtifact = createTests(artifactID, cr, modelBoundary, validity);		
			}	
			else
				return;	
		}
		else if (funcRequirement != null and artifact == null) {
		
			sourceArtifact = funcRequirement;
			if ((mode == IMPLEMENT_LINK) or (mode == IMPLEMENT_LINK_LOCAL))
				destArtifact = createModels(artifactID, cr, modelBoundary, validity);	
			else
				destArtifact = createTests(artifactID, cr, modelBoundary, validity);		
	
			
		}
		else if (funcRequirement == null and artifact != null) {
			sourceArtifact = createFunctionalRequirement(funcReqArtifactID, cr, modelBoundary, validity);	
			destArtifact = artifact;
		} 				

		else {
				var found : Boolean = false;
				for (dsa : MODEL!Traceability in funcRequirement.downstreamTraceLinks) {
				
					if (dsa.destination.artifactID == artifactID) {
							found = true;
							break;
						}
				}
				if (found == false) {
					sourceArtifact = funcRequirement;
					destArtifact = artifact;
				}
				else {
				
					return;
				}
			
		
		}
		
		
		if ((mode == IMPLEMENT_LINK) or (mode == IMPLEMENT_LINK_LOCAL))
			traceLink = createImplementTraceLink(sourceArtifact, destArtifact, validity, modelBoundary, traceUID);
		else
			traceLink = createVerifyTraceLink(sourceArtifact, destArtifact, validity, modelBoundary, traceUID);
		
		sourceArtifact.downstreamTraceLinks.add(traceLink);
		destArtifact.upstreamTraceLinks.add(traceLink);	
		
		return traceLink;
			
}

operation copyGTMCR(gtmArtifact : GTM!Artifact, ltmArtifact : MODEL!Artifact, modelBoundary : MODEL!GlobalTraceModel) {

	var i : Integer = 0;
	while (i < gtmArtifact.changeRequests.size) {
		
		
		var crGTM = gtmArtifact.changeRequests.at(i);
		var crLTM = modelBoundary.CR_Tickets.selectOne(p : MODEL!Change_Request_Ticket | p.crID = crGTM.crID);
		
		if (crLTM == null) {
			crLTM = new MODEL!Change_Request_Ticket;

			crLTM.crID = crGTM.crID;
			crLTM.summary = crGTM.summary;
			crLTM.description = crGTM.description;
			crLTM.version = crGTM.version;
			crLTM.chHelpful = crGTM.chHelpful;
			crLTM.mergeRationale = crGTM.mergeRationale;
			crLTM.plannedLOE = crGTM.plannedLOE;
			crLTM.actualLOE = crGTM.actualLOE;
			crLTM.status = crGTM.status;
			
			modelBoundary.CR_Tickets.add(crLTM);
		}
		
		ltmArtifact.changeRequests.add(crLTM);
		crLTM.affectedArtifacts.add(ltmArtifact);
		
		i = i + 1;
	}	

}