import "EolLibrary.eol";

var DERIVE_LINK : Integer = 1;
var IMPLEMENT_LINK : Integer = 2;
var VERIFY_LINK : Integer = 3;
var DERIVE_LINK_LOCAL : Integer = 4;
var IMPLEMENT_LINK_LOCAL : Integer = 5;
var VERIFY_LINK_LOCAL : Integer = 6;


var ltmBoundary = LTM!GlobalTraceModel.all.first;
var gtmBoundary = MODEL!GlobalTraceModel.all.first;

var displayMsg : String = "";

var deriveLinks = LTM!Derive.all;
var implementLinks = LTM!Implement.all;
var verifyLinks = LTM!Verify.all;

var ltmFile = new Native("java.io.File")(LTM.modelFile);
var ltmCR = ltmFile.getName().replace(".tim","").asInteger();

//var ltmCR = LTM.modelFile.replace("platform:/resource/eclipse/LTM/", "").replace(".tim", "").asInteger();
var cr = LTM!Change_Request_Ticket.all.selectOne(p : LTM!Change_Request_Ticket | p.crID == ltmCR);

if (cr.status != "closed")
{	
	var msg = "CR-" + ltmCR + " is not closed. Merge will not proceed!";
	System.user.inform(msg);
}
else
{
displayMsg = modelComparision(deriveLinks, gtmBoundary.sysRequirements, gtmBoundary.funcRequirements, displayMsg);
displayMsg = modelComparision(implementLinks, gtmBoundary.funcRequirements, gtmBoundary.modelBlocks, displayMsg);
displayMsg = modelComparision(verifyLinks, gtmBoundary.funcRequirements, gtmBoundary.testBlocks, displayMsg);

if (displayMsg == "") {	
	var ltmArtifacts = LTM!Artifact.all;
	var gtmArtifacts = MODEL!Artifact.all;
	copyLTMCRs(ltmArtifacts, gtmArtifacts, cr, gtmBoundary);

}
else
{
	System.user.inform(displayMsg);
	
	var userPrompt = System.user.confirm("Assuming the merge rationale is filled, and do you want to force merge?");
	if (userPrompt == true) {
	
	//Hack due to a limitation
	var crDummy = new MODEL!Change_Request_Ticket;
	crDummy.crID = -999;
	
	
	var pass : Integer = 0;
	while (pass < 12) {
		
		var traceLinks = LTM!Traceability.all;
		for(tl : LTM!Traceability in traceLinks) {	
			
			var newTL = null;
			
			if (tl.eClass.name == "Derive")
				newTL = createDeriveTraceability(tl.source.artifactID, tl.destination.artifactID, crDummy, gtmBoundary, tl.traceUID, DERIVE_LINK_LOCAL, false);
			else if (tl.eClass.name == "Implement")
				newTL = createImplementVerifyTraceability(tl.destination.artifactID, tl.source.artifactID, crDummy, gtmBoundary, tl.traceUID, IMPLEMENT_LINK_LOCAL, false);	
			else
				newTL = createImplementVerifyTraceability(tl.destination.artifactID, tl.source.artifactID, crDummy, gtmBoundary, tl.traceUID, VERIFY_LINK_LOCAL, false);		
		 	
		 	if (newTL != null)
		 	{
		 		newTL.valid = true;
		 	}
		}
		pass = pass + 1;
	}
	
	var ltmArtifacts = LTM!Artifact.all;
	var gtmArtifacts = MODEL!Artifact.all;
	copyLTMCRs(ltmArtifacts, gtmArtifacts, cr, gtmBoundary);
	
	delete crDummy;
		
	}	
	else
		"Force Merge Aborted".println();
}
	System.user.inform("Complete Merge!");
}

		