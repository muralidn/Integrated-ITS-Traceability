import "EolLibrary.eol";

var DERIVE_LINK : Integer = 1;
var IMPLEMENT_LINK : Integer = 2;
var VERIFY_LINK : Integer = 3;

var ltmBoundary = LTM!GlobalTraceModel.all.first;
var cr = LTM!Change_Request_Ticket.all.first;

var link=SLREQ!Link.all; 

var selectedRequirements = System.user.prompt("Enter functional requirement IDs separated by a comma").split(",").println();

var i : Integer = 0;
var traceUID : Integer = 1000; 

while (i < link.size()) {	

		var linkType = link.at(i).getProperty("Type");
		
		if (linkType == "Derive" or linkType == "Implement" or linkType == "Verify") {
			var funcReqID = link.at(i).getDestination().getProperty("id").asString().replace("#","");
			var reqSelect = selectedRequirements.selectOne(r : String | r = funcReqID);		
			
			if (reqSelect != null) {			
				var funcReqArtifactID = getFullReqID(funcReqID, link.at(i).getDestination().getProperty("artifact").asString());
				
				if (linkType == "Derive") {
					var sysReqArtifactID = getFullModelID(link.at(i).getSource().getProperty("id").asString() , link.at(i).getSource().getProperty("artifact").asString());
					createDeriveTraceability(sysReqArtifactID, funcReqArtifactID, cr, ltmBoundary, traceUID);
				}
				else if (linkType == "Implement") {
					var modelID = getFullModelID(link.at(i).getSource().getProperty("id").asString(), link.at(i).getSource().getProperty("artifact").asString());
					createImplementVerifyTraceability(modelID, funcReqArtifactID, cr, ltmBoundary, traceUID, IMPLEMENT_LINK);				
				}
				else {
					var testID = getFullTestID(link.at(i).getSource().getProperty("id").asString(), link.at(i).getSource().getProperty("artifact").asString());
					createImplementVerifyTraceability(testID, funcReqArtifactID, cr, ltmBoundary, traceUID, VERIFY_LINK);				
				}
			
				traceUID = traceUID + 1;	
			}
		}

		i = i + 1;
}


"Complete".println();