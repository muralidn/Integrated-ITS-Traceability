@namespace(
	uri="Trace_Information_Model",
	prefix="")

@gmf
package TIM;

@gmf.diagram
class GlobalTraceModel
{	
	val GTMController gtmController;
	val LTMController ltmController;
	val GTMVersion gtmVersion;
	val SystemRequirement[*] sysRequirements;
	val FunctionalRequirement[*] funcRequirements;
	val Model[*] modelBlocks;
	val Test[*] testBlocks;
	val Derive[*] deriveTraceLinks;
	val Implement[*] implementTraceLinks;
	val Verify[*] verifyTraceLinks;
	val Change_Request_Ticket[*] CR_Tickets;
	
}

@gmf.node(label = "createNewCR, ltmCR", label.icon = "false", figure="rectangle", label.pattern = "Create New CR: {0} (OR) LTM CR: {1}")
class GTMController
{
	attr Boolean createNewCR;
	attr String ltmCR;	
}

@gmf.node(label = "complete", label.icon = "false", figure="rectangle", label.pattern = "CR Complete: {0}")
class LTMController
{
	attr Boolean complete;
}

@gmf.node(label = "version", label.icon = "false", figure="rectangle", label.pattern = "Build Version: {0}")
class GTMVersion
{
	attr String version;	
}

@gmf.node(label = "crID", label.pattern = "CR - #{0}", label.icon = "false", figure = "rectangle", phantom = "true")
class Change_Request_Ticket
{
	attr int crID;
	attr String summary;
	attr String description;
	attr String version;
	attr String chHelpful;
	attr String mergeRationale;
	attr Float plannedLOE;
	attr Float actualLOE;
	attr String status;
	ref Artifact[*]#changeRequests affectedArtifacts;
}

enum Progress_Enum
{
	ZERO;
	TWENTY_FIVE_PERCENT;
	FIFTY_PERCENT;
	SEVENTY_FIVE_PERCENT;
	HUNDRED_PERCENT;
}

@gmf.node(label = "artifactID, progress", label.icon = "false", figure="ellipse", label.color = "255,255,255", label.pattern = "{0}, Prog: {1}")
abstract class Artifact
{
	attr String artifactID;
	attr Progress_Enum progress;
	//@gmf.link(label="changeRequests")
	ref Change_Request_Ticket[*]#affectedArtifacts changeRequests;
	attr Boolean select = false;
	
}

@gmf.link(source = "source", target = "destination",source.constraint = "self <> oppositeEnd", source.decoration = "filledclosedarrow",
target.constraint = "self <> oppositeEnd", target.decoration = "filledclosedarrow")
abstract class Traceability
{
	attr int traceUID;
	attr Boolean valid = true;
}

@gmf.link(label = type)
class Derive extends Traceability 
{
	attr String type = "DERIVE";
	ref SystemRequirement#destination source;
	ref FunctionalRequirement#source destination;
}

@gmf.link(label = type)
class Implement extends Traceability 
{
	attr String type = "IMPLEMENT";
	ref FunctionalRequirement#destination source;
	ref Model#source destination;
}

@gmf.link(label = type)
class Verify extends Traceability 
{
	attr String type = "VERIFY";
	ref FunctionalRequirement#destination source;
	ref Test#source destination;
}


@gmf.node(label.pattern = "{0}, Progress: {1}", color = "75,0,0")
class SystemRequirement extends Artifact
{
	ref Derive[*] downstreamTraceLinks;
}

@gmf.node(label.pattern = "{0}, Progress: {1}", color = "175,0,0")
class FunctionalRequirement extends Artifact
{
	ref Derive[*] upstreamTraceLinks;
	ref Traceability[*] downstreamTraceLinks;
	
}

@gmf.node(label.pattern = "{0}, Progress: {1}", color = "0,125,0")
class Model extends Artifact
{
	ref Implement[*] upstreamTraceLinks;
}

@gmf.node(label.pattern = "{0}, Progress: {1}", color = "0,0,125")
class Test extends Artifact
{
	ref Verify[*] upstreamTraceLinks;
}